comandos basicos GitHub:

.git
// pasta oculta base do Git.

.gitignore
// pasta oculta com instruçoes para ignorar arquivos no repositorio.

git --version
// verifica qual git está instalado na máquina.

git init
// Cria um repositorio(arquivos) na sua maquina para iniciar o controle de versão.

git status
// verifica o estados dos arquivos do Git iniciados na pasta local.

git add NOMEDOARQUIVO
// adiciona um arquivo para ser commitado ao git , para selecionar todos usar o espaço .

git rm NOMEDOARQUIVO
// remoção de um arquivo do repositorio do GitHub.

git commit -a -m "Comentário"
// realiza o commit de todos os arquivos modificados junto com um comentario escrito pelo autor.

git branch -m main
// criar um branch , no caso main , para saber quem foi o autor do commit.

git remote add origin URL DO GITGUB
// adiciona o repositorio remoto do GitHub ao Git , geralmente classificado como origin.

git push -u origin main
// realiza a inserção das commit's local ao repositorio do GitHub.

git push
// após a primeira realização do git push -u origin main, é possivel usar só o git push , desde que se queira usar as mesmas branchs. 

git pull
// realiza o download das atualizações dos arquivos que se encontram no repositorio do GitHub para a pasta local.

git clone URL DO GITGUB .
// realiza o download e criação de todo um repositorio do GitHub para uma pasta local. A difderença base entre o git clone e o git pull é que se usa o git clone quando não se sabe direito quem é o origin , e com o clone ele traz essa informação.

git log
// acessa um historico dos log de modificações de um repositorio. para sair do log , usar o CTRL + C ou a tecla q .

git mv NOMEDOARQUIVO NOVOPATHDOARQUIVO
// usado para mover ou renomear um arquivo do seu repositorio.

git checkout NOMEDOARQUIVO
// usado para desfazer alterações desnecessarias ao repositorio.

git reset --hard origin/main
// Desfaz todas as mudanças feitas pelo autor , retornando o projeto ao seu estado inicial.

git branch NOMEDOBRANCH
// esse comando sozinho mostra os branchs existentes no projeto , ao adicionar um espaço e um nome , criasse um novo branch.

git checkout -b NOMEDOBRANCH
// muda de branch no repositorio, ao usar a flag -b ela cria e altera para o branch com o NOMEDOBRANCH.  

git merge NOMEDOBRANCH
// uni os branchs.

git stash
// move todas as modificações da sua branch para uma area semelhante a uma lixeira , mas tudo fica arquivado , e o repositorio local volta ao estado inicial de quando foi iniciado/clonado.

git stash list

// lista todas as git stash dadas e ajuda a recuperar os arquivos.

git stash apply NUMERODASTASH
// recupera o progresso da branch jogada na stash selecionada por número.

git stash show -p NUMERODASTASH
// possibilida ver as diferenças entre as stashs.

git stash clear
// limpa todas as stashs criadas contidas na list.

git stash drop NUMERODASTASH
// limpa uma stash especifica usado o numero dela na lista das stashs.

git tag -a NOMEDATAG -m "Comentário"
// usado para arquivar algumas modificações salvando como um checkpoint para o branch.

git show NOMEDATAG
// possibilida ver as informações da tag criada.

git checkout NOMEDATAG
// possibilida a troca de tags.

git push origin NOMEDATAG
// envia para o repositorio a tag selecionada.

git push origin --tags
// envia o conjunto de tags local para o repositorio.

git fetch -a
// atualiza todos os branchs e tags que ainda não são reconhecidos localmente.

git push --set-upstream origin NOMEDOBRANCH
// envia o branch local para o repositorio ficando visivel para todos com acesso ao GitHub.

git submodule
// cria um submodulo para ser usado em um repositorio.

git push --recurse-submodules=on-demand
// envia os submodulos para o repositorio.

git diff NOMEDOARQUIVO NOMEDOARQUIVO
// mostra as diferenças entre os arquivos.

git shortlog
// permite ver o log resumido de um projeto alocado no repositorio. igual ao log , para sair pode-se usar o CTRL + C ou a tecla q .

git clean -f
// limpa os arquivos que não estão sendo trackeados. A flag -f pode ser usado para forçar o comando clean.

git gc
// abreviação de garbage collector , identifica os arquivos que não são mais necessários e os exclui.

git fsck
// verifica a integridade de arquivos e sua conectividade.

git reflog
// mapeia todos os passos no repositorio , com tempo de limite de 30 dias.

git archive --format zip --output arquivos_master.zip master
// compacta os arquivos de um repositorio em um formato, no caso zip.


